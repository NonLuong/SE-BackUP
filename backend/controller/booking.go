package controller

import (
	"encoding/json"
	"fmt"
	"log"
	"math"
	"net/http"
	"project-se/config"
	"project-se/entity"
	
	"strconv"
	"github.com/gin-gonic/gin"
	"github.com/gorilla/websocket" // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£ import WebSocket
)

/*func CreateBooking(c *gin.Context) {
    var booking entity.Booking

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö JSON ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    if err := c.ShouldBindJSON(&booking); err != nil {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
        return
    }

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    db := config.DB()

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if err := db.Create(&booking).Error; err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create booking"})
        return
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á client
    c.JSON(http.StatusCreated, gin.H{
        "message": "Booking created successfully",
        "data":    booking,
    })
}*/

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func GetAllBookings(c *gin.Context) {
	var bookings []entity.Booking
	db := config.DB()

	if err := db.Preload("StartLocation").Preload("Destination").Find(&bookings).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to fetch bookings"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data":    bookings,
	})
}


func GetAllVehicles(c *gin.Context) {
	var vehicles []entity.NametypeVechicle
	db := config.DB()

	if err := db.Preload("VehicleType").Find(&vehicles).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{
			"error": "Failed to fetch vehicles",
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data":    vehicles,
	})
}

// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Booking ‡∏ï‡∏≤‡∏° ID
func GetBookingByID(c *gin.Context) {
	var booking entity.Booking
	db := config.DB()

	id := c.Param("id")
	if err := db.Preload("StartLocation").Preload("Destination").First(&booking, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Booking not found"})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data":    booking,
	})
}


func CreateBooking(c *gin.Context) {
	var booking entity.Booking

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏à‡∏≤‡∏Å JSON
	if err := c.ShouldBindJSON(&booking); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid request"})
		return
	}

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
	/*if booking.StatusBooking == "" {
		booking.StatusBooking = "Pending"
	}
	if booking.BookingTime == "" {
		booking.BookingTime = fmt.Sprintf("%v", time.Now())
	}*/

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á
	db := config.DB()
	if err := db.Create(&booking).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create booking"})
		return
	}

	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	c.JSON(http.StatusCreated, gin.H{
		"message": "Booking created successfully",
		"data":    booking,
	})
}


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≠‡∏á‡∏û‡∏¥‡∏Å‡∏±‡∏î (‡πÉ‡∏ä‡πâ Haversine Formula)
func calculateDistance(lat1, lon1, lat2, lon2 float64) float64 {
	const EarthRadius = 6371.0 // ‡∏£‡∏±‡∏®‡∏°‡∏µ‡πÇ‡∏•‡∏Å (‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£)

	// ‡πÅ‡∏õ‡∏•‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ô
	dlat := degToRad(lat2 - lat1)
	dlon := degToRad(lon2 - lon1)

	// ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡∏î‡πâ‡∏ß‡∏¢ Haversine formula
	a := math.Sin(dlat/2)*math.Sin(dlat/2) +
		math.Cos(degToRad(lat1))*math.Cos(degToRad(lat2))*math.Sin(dlon/2)*math.Sin(dlon/2)
	c := 2 * math.Atan2(math.Sqrt(a), math.Sqrt(1-a))

	// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏ó‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏¥‡πÇ‡∏•‡πÄ‡∏°‡∏ï‡∏£
	return EarthRadius * c
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å‡∏≠‡∏á‡∏®‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡πÄ‡∏î‡∏µ‡∏¢‡∏ô
func degToRad(deg float64) float64 {
	return deg * math.Pi / 180
}

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡πâ‡∏≠‡∏á
var clients = make(map[string]map[*websocket.Conn]bool) // map[roomID] -> set of connections



func addClientConnection(room string, conn *websocket.Conn) {
	if _, exists := clients[room]; !exists {
		clients[room] = make(map[*websocket.Conn]bool)
		fmt.Printf("‚úÖ Room created: %s\n", room)
	}
	clients[room][conn] = true
	fmt.Printf("‚úÖ Added connection to room %s\n", room)
}


// ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î HTTP ‡πÄ‡∏õ‡πá‡∏ô WebSocket
var upgrader = websocket.Upgrader{
	CheckOrigin: func(r *http.Request) bool {
		return true // ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ó‡∏∏‡∏Å origin (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤)
	},
}

func DriverWebSocketHandler(c *gin.Context) {
	driverID := c.Param("driverID") // ‡∏î‡∏∂‡∏á driverID ‡∏à‡∏≤‡∏Å URL

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏Å‡∏£‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô WebSocket
	conn, err := upgrader.Upgrade(c.Writer, c.Request, nil)
	if err != nil {
		log.Println("‚ùå Failed to upgrade WebSocket connection:", err)
		return
	}
	defer conn.Close()

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á clients
	room := driverID
	addClientConnection(room, conn)
	fmt.Printf("‚úÖ WebSocket connection established for driver %s\n", driverID)

	// ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å WebSocket (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
	for {
		_, _, err := conn.ReadMessage()
		if err != nil {
			log.Println("‚ùå Error reading message from WebSocket:", err)
			break
		}
	}
}

func sendMessageToDriver(room string, bookingID uint) {
	fmt.Println("üîç Debug: Start sendMessageToDriver")
	fmt.Printf("üõ†Ô∏è Room: %s | BookingID: %d\n", room, bookingID)
	fmt.Printf("üõ†Ô∏è Current Clients: %+v\n", clients)

	conn, exists := clients[room]
	if !exists {
		fmt.Println("‚ùå Room does not exist in clients.")
		log.Printf("No active connection for driver %s", room)
		return
	}

	if len(conn) == 0 {
		fmt.Println("‚ùå No active connections in the specified room.")
		log.Printf("No active connections for driver %s", room)
		return
	}

	message := map[string]interface{}{
		"type":      "new_booking",
		"bookingId": bookingID,
	}
	messageJSON, err := json.Marshal(message)
	if err != nil {
		log.Println("‚ùå Error marshalling booking message:", err)
		return
	}

	for c := range conn {
		err := c.WriteMessage(websocket.TextMessage, messageJSON)
		if err != nil {
			log.Println("‚ùå Error sending message to driver:", err)
			c.Close()
			delete(clients[room], c)
		} else {
			fmt.Println("‚úÖ Message sent successfully to a connection.")
		}
	}

	log.Printf("üì® Message sent to room %s: %s", room, string(messageJSON))
}




func AcceptBooking(c *gin.Context) {
    db := config.DB()
    bookingID := c.Param("id")

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö bookingID ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    var booking entity.Booking
    if err := db.First(&booking, bookingID).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "Booking not found"})
        return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô entity.BookingStatus
    var currentBookingStatus entity.BookingStatus
    if err := db.Where("booking_id = ?", booking.ID).Order("created_at desc").First(&currentBookingStatus).Error; err != nil {
        c.JSON(http.StatusNotFound, gin.H{"error": "Booking status not found"})
        return
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏õ‡πá‡∏ô "Waiting for driver acceptance" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if currentBookingStatus.StatusBooking != "Waiting for driver acceptance" {
        c.JSON(http.StatusBadRequest, gin.H{"error": "Booking already processed or in an incorrect state"})
        return
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "Accepted"
    currentBookingStatus.StatusBooking = "Accepted"
    if err := db.Save(&currentBookingStatus).Error; err != nil {
        c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update booking status"})
        return
    }

    // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    c.JSON(http.StatusOK, gin.H{
        "success": true,
        "message": "Booking accepted successfully",
        "data": gin.H{
            "booking":        booking,
            "booking_status": currentBookingStatus,
        },
    })
}

// UpdateDriverIDInBooking updates the driver_id for a specific booking
func UpdateDriverIDInBooking(c *gin.Context) {
	db := config.DB()

	// Get the booking ID from the URL parameters
	bookingID := c.Param("id")

	// Parse booking ID to uint
	parsedBookingID, err := strconv.ParseUint(bookingID, 10, 64)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid booking ID"})
		return
	}

	// Get the request payload (driver_id)
	var input struct {
		DriverID uint `json:"driver_id" binding:"required"`
	}
	if err := c.ShouldBindJSON(&input); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid input"})
		return
	}

	// Fetch the booking record
	var booking entity.Booking
	if err := db.First(&booking, parsedBookingID).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Booking not found"})
		return
	}

	// Update the driver_id
	booking.DriverID = input.DriverID
	if err := db.Save(&booking).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update driver ID in booking"})
		return
	}

	// Return success response
	c.JSON(http.StatusOK, gin.H{
		"status":  "success",
		"message": "Driver ID updated successfully",
		"data": gin.H{
			"booking_id": booking.ID,
			"driver_id":  booking.DriverID,
		},
	})
}

func UpdateBookingStatusToComplete(c *gin.Context) {
	db := config.DB()
	bookingID := c.Param("id")

	// ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ BookingStatus
	var bookingStatus entity.BookingStatus
	if err := db.Where("booking_id = ?", bookingID).First(&bookingStatus).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "BookingStatus not found"})
		return
	}

	// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ BookingStatus
	bookingStatus.StatusBooking = "complete"
	if err := db.Save(&bookingStatus).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to update BookingStatus"})
		return
	}

	// ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"message": "BookingStatus updated to complete successfully",
		"data":    bookingStatus,
	})
}